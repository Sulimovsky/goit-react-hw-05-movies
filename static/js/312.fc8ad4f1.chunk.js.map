{"version":3,"file":"static/js/312.fc8ad4f1.chunk.js","mappings":"iRA+CA,EAxCa,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,YACR,iBAAC,oGAEGH,GAAW,GAFd,SAG0BI,EAAAA,GAAoBV,GAH9C,OAGSW,EAHT,OAIGP,EAAQO,EAASC,KAAKT,MAJzB,gDAMGK,GAAS,GANZ,yBAQGF,GAAW,GARd,2EAAD,EAWD,GAAE,CAACN,KAGF,2BACGG,EAAKU,OAAS,IACb,eAAIC,UAAU,YAAd,SACGX,EAAKY,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAb,OACR,gBAAaF,GAAIA,EAAIF,UAAU,OAA/B,WACE,gBAAKA,UAAU,UAAf,UACE,gBAAKK,IAAG,UAAKT,EAAAA,IAAL,OAAwBQ,GAAgBE,IAAKH,OAEvD,uBAAIA,MAJGD,EADD,MAUbX,IAAW,SAACgB,EAAA,EAAD,IACXd,IAAS,SAACe,EAAA,EAAD,MAGf,C,mCC3CD,IAFc,kBAAM,mDAAN,C,4LCERC,EAAU,mCACVC,EAAW,+BACJC,EAAe,kCAEfC,EAAoB,WAE/B,OADgBC,EAAAA,EAAAA,GAAM,GAAD,OAAIH,EAAJ,uCAA2CD,GAEjE,EAEYK,EAAkB,SAAAC,GAI7B,OAHiBF,EAAAA,EAAAA,GAAM,GAAD,OACjBH,EADiB,iCACgBD,EADhB,kBACiCM,GAGxD,EAEYC,EAAkB,SAAA9B,GAE7B,OADiB2B,EAAAA,EAAAA,GAAM,GAAD,OAAIH,EAAJ,kBAAsBxB,EAAtB,oBAAyCuB,GAEhE,EAEYQ,EAAkB,SAAA/B,GAI7B,OAHiB2B,EAAAA,EAAAA,GAAM,GAAD,OACjBH,EADiB,kBACCxB,EADD,4BAC4BuB,GAGnD,EAEYS,EAAkB,SAAAhC,GAI7B,OAHiB2B,EAAAA,EAAAA,GAAM,GAAD,OACjBH,EADiB,kBACCxB,EADD,4BAC4BuB,GAGnD,C","sources":["components/Cast/Cast.jsx","components/common/Error/Error.jsx","services/api.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Loader from 'components/common/Loader/Loader';\nimport Error from 'components/common/Error/Error';\nimport * as API from '../../services/api';\nimport './Cast.scss';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    (async function () {\n      try {\n        setLoading(true);\n        const response = await API.getMovieCredits(movieId);\n        setCast(response.data.cast);\n      } catch (error) {\n        setError(true);\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, [movieId]);\n\n  return (\n    <div>\n      {cast.length > 0 && (\n        <ul className=\"cast-list\">\n          {cast.map(({ id, name, profile_path }) => (\n            <li key={id} id={id} className=\"item\">\n              <div className=\"box-img\">\n                <img src={`${API.BASE_IMG_URL}${profile_path}`} alt={name} />\n              </div>\n              <p>{name}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n      {loading && <Loader />}\n      {error && <Error />}\n    </div>\n  );\n};\n\nexport default Cast;\n","const Error = () => <h1>Something went wrong...</h1>;\n\nexport default Error;\n","import axios from 'axios';\n\nconst API_KEY = '288d413468bcdb13681c080a523b13ad';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nexport const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport const getTrendingMovies = () => {\n  const resonse = axios(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}`);\n  return resonse;\n};\n\nexport const getSearchMovies = query => {\n  const response = axios(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`\n  );\n  return response;\n};\n\nexport const getMovieDetails = movieId => {\n  const response = axios(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`);\n  return response;\n};\n\nexport const getMovieCredits = movieId => {\n  const response = axios(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return response;\n};\n\nexport const getMovieReviews = movieId => {\n  const response = axios(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return response;\n};\n"],"names":["movieId","useParams","useState","cast","setCast","loading","setLoading","error","setError","useEffect","API","response","data","length","className","map","id","name","profile_path","src","alt","Loader","Error","API_KEY","BASE_URL","BASE_IMG_URL","getTrendingMovies","axios","getSearchMovies","query","getMovieDetails","getMovieCredits","getMovieReviews"],"sourceRoot":""}